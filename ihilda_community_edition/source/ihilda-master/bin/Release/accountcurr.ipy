#!/usr/bin/ipy

# import the common language runtime
import clr

#import System dll's
import System

#import .net Array
from System import Array

# add reference to the library 
clr.AddReferenceToFileAndPath("riplibsharp.exe")

# import the rippleLibSharp namespace
import RippleLibSharp

# create a connection settings object
con = RippleLibSharp.Network.ConnectionSettings()

# set the urls for connecting to rippled as an array of strings
con.ServerUrls = Array[str] (["wss://s1.ripple.com"])

# create a network interface using the connection settings as a parameter
net = RippleLibSharp.Network.NetworkInterface(con)

# begin a connection task
task = net.ConnectTask()

# wait for the connection to complete
task.Wait()

# assign a ripple address to a string. 
acc = "rBuDDpdVBt57JbyfXbs8gjWvp4ScKssHzx"

# cancellation tokens are a .net feature for cancelling threads
# Normally you would use a tokensource object to manage cancellations
# below we set a blank token, no cancellation ability
token = System.Threading.CancellationToken()

# Begin task to fetch account currencies
# pass the account, the network interface and the cancelation token as parameters
task2 = RippleLibSharp.Commands.Accounts.AccountCurrencies.GetResult (acc, net, token)

# wait for the results
task2.Wait()

# retrieve currencies from response
result = task2.Result.result.send_currencies

# print results to screen
print result
